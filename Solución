from queue import Queue as Cola

# Ejercicio 1
def gestion_ventas(ventas_empleado_producto: list[tuple[str, str, int]]) -> dict[str, list[tuple[str,int]]]:
    res:dict[str, list[tuple[str,int]]]={}

    for empleado in productos_por_empleado(ventas_empleado_producto):
        res[empleado[0]]=empleado[1]

    return res 

def productos_por_empleado(ventas_empleado_producto: list[tuple[str, str, int]])-> list[tuple[str, list[tuple[str, int]]]]:
    lista_empleados:list[tuple[str, list[tuple[str, int]]]]=[]

    for empleado1, producto1, cant1 in ventas_empleado_producto:
        lista_productos_por_empleado:list[tuple[str, int]]=[]
        lista_productos_por_empleado.append((producto1, cant1))
        for empleado2, producto2, cant2 in ventas_empleado_producto:
            if empleado1 == empleado2 and producto1 != producto2:
                lista_productos_por_empleado.append((producto2, cant2))
        lista_empleados.append((empleado1, lista_productos_por_empleado))

    return lista_empleados
 
# Ejercicio 2
def cantidad_digitos_impares(numeros: list[int]) -> int:
    res:int=0

    for numero in numeros:
        while numero>0:
            if not es_par(numero):
                res+=1
            numero=numero//10

    return res

def es_par(numero:int) -> bool:
    res:bool=False
    if numero%2==0:
        res=True
    return res


# Ejercicio 3
def reordenar_cola_primero_numerosas(carpetas: Cola[tuple[str,int]], umbral:int) -> Cola[tuple[str,int]]:
    res:Cola[tuple[str,int]]=Cola()
    cola_aux:Cola[tuple[str,int]]=Cola()

    mayor_umbral:Cola[tuple[str,int]]=Cola()
    menor_umbral:Cola[tuple[str,int]]=Cola()

    while not carpetas.empty():
        carpeta:tuple[str,int]=carpetas.get()
        cola_aux.put(carpeta)
        if carpeta[1]<=umbral:
            menor_umbral.put(carpeta)
        else:
            mayor_umbral.put(carpeta)

    while not cola_aux.empty():
        carpeta:tuple[str,int]=cola_aux.get()
        carpetas.put(carpeta)
    
    while not mayor_umbral.empty():
        carpeta:tuple[str,int]=mayor_umbral.get()
        res.put(carpeta)
    
    while not menor_umbral.empty():
        carpeta:tuple[str,int]=menor_umbral.get()
        res.put(carpeta)

    return res

# Ejercicio 4

def maximo_columna(matriz: list[list[int]], i:int) -> int:
    max:int=0
    for fila1 in matriz:
        for fila2 in matriz:
            if fila2[i] >= fila1[i] and fila2[i]>max:
                max=fila2[i]
            elif max==0:
                max=fila1[i]
            else:
                max=max
    return max


def matriz_cuasi_decreciente(matriz: list[list[int]]) -> bool:

    res:bool=True

    for i in range(len(matriz[0])-1):
        if maximo_columna(matriz, i) <= maximo_columna(matriz, i+1):
            res=False

    return res
